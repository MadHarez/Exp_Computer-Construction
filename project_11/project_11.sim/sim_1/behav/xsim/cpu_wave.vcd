$date
   Thu May  1 11:57:31 2025
$end
$version
  2018.3
$end
$timescale
  1ps
$end
$scope module CPU_Test $end
$var reg 1 ! clk $end
$var reg 1 " mclk $end
$var reg 1 # rst $end
$var reg 1 $ Write_Reg $end
$var reg 1 % sw_F_ZFOF $end
$var wire 32 & output_signal [31:0] $end
$var wire 3 ' which [2:0] $end
$var wire 8 ( seg [7:0] $end
$var wire 1 ) enable $end
$scope module uut $end
$var wire 1 * mclk $end
$var wire 1 + clk $end
$var wire 1 , rst $end
$var wire 1 - Write_Reg $end
$var wire 1 . sw_F_ZFOF $end
$var reg 32 / output_signal [31:0] $end
$var wire 3 ' which [2:0] $end
$var wire 8 ( seg [7:0] $end
$var wire 1 ) enable $end
$var wire 32 0 Inst_code [31:0] $end
$var wire 2 1 out_ZF_OF [1:0] $end
$var wire 6 2 op_code [5:0] $end
$var wire 5 3 rs_addr [4:0] $end
$var wire 5 4 rt_addr [4:0] $end
$var wire 5 5 rd_addr [4:0] $end
$var wire 5 6 shamt [4:0] $end
$var wire 6 7 funct [5:0] $end
$var wire 32 8 F [31:0] $end
$var reg 4 9 ALU_OP [3:0] $end
$scope module pc1 $end
$var wire 1 * clk $end
$var wire 1 , rst $end
$var wire 32 : PC_new [31:0] $end
$var reg 32 ; PC [31:0] $end
$var wire 32 0 Inst_code [31:0] $end
$scope module Inst_ROM_init $end
$var wire 1 * clka $end
$var wire 1 < wea [0:0] $end
$var wire 6 = addra [5:0] $end
$var wire 32 > dina [31:0] $end
$var wire 32 0 douta [31:0] $end
$scope module inst $end
$var wire 1 * clka $end
$var wire 1 ? rsta $end
$var wire 1 @ ena $end
$var wire 1 A regcea $end
$var wire 1 < wea [0:0] $end
$var wire 6 = addra [5:0] $end
$var wire 32 > dina [31:0] $end
$var wire 32 0 douta [31:0] $end
$var wire 1 B clkb $end
$var wire 1 C rstb $end
$var wire 1 D enb $end
$var wire 1 E regceb $end
$var wire 1 F web [0:0] $end
$var wire 6 G addrb [5:0] $end
$var wire 32 H dinb [31:0] $end
$var wire 32 I doutb [31:0] $end
$var wire 1 J injectsbiterr $end
$var wire 1 K injectdbiterr $end
$var wire 1 L sbiterr $end
$var wire 1 M dbiterr $end
$var wire 6 N rdaddrecc [5:0] $end
$var wire 1 O eccpipece $end
$var wire 1 P sleep $end
$var wire 1 Q deepsleep $end
$var wire 1 R shutdown $end
$var wire 1 S rsta_busy $end
$var wire 1 T rstb_busy $end
$var wire 1 U s_aclk $end
$var wire 1 V s_aresetn $end
$var wire 4 W s_axi_awid [3:0] $end
$var wire 32 X s_axi_awaddr [31:0] $end
$var wire 8 Y s_axi_awlen [7:0] $end
$var wire 3 Z s_axi_awsize [2:0] $end
$var wire 2 [ s_axi_awburst [1:0] $end
$var wire 1 \ s_axi_awvalid $end
$var wire 1 ] s_axi_awready $end
$var wire 32 ^ s_axi_wdata [31:0] $end
$var wire 1 _ s_axi_wstrb [0:0] $end
$var wire 1 ` s_axi_wlast $end
$var wire 1 a s_axi_wvalid $end
$var wire 1 b s_axi_wready $end
$var wire 4 c s_axi_bid [3:0] $end
$var wire 2 d s_axi_bresp [1:0] $end
$var wire 1 e s_axi_bvalid $end
$var wire 1 f s_axi_bready $end
$var wire 4 g s_axi_arid [3:0] $end
$var wire 32 h s_axi_araddr [31:0] $end
$var wire 8 i s_axi_arlen [7:0] $end
$var wire 3 j s_axi_arsize [2:0] $end
$var wire 2 k s_axi_arburst [1:0] $end
$var wire 1 l s_axi_arvalid $end
$var wire 1 m s_axi_arready $end
$var wire 4 n s_axi_rid [3:0] $end
$var wire 32 o s_axi_rdata [31:0] $end
$var wire 2 p s_axi_rresp [1:0] $end
$var wire 1 q s_axi_rlast $end
$var wire 1 r s_axi_rvalid $end
$var wire 1 s s_axi_rready $end
$var wire 1 t s_axi_injectsbiterr $end
$var wire 1 u s_axi_injectdbiterr $end
$var wire 1 v s_axi_sbiterr $end
$var wire 1 w s_axi_dbiterr $end
$var wire 6 x s_axi_rdaddrecc [5:0] $end
$var wire 1 y SBITERR $end
$var wire 1 z DBITERR $end
$var wire 1 { S_AXI_AWREADY $end
$var wire 1 | S_AXI_WREADY $end
$var wire 1 } S_AXI_BVALID $end
$var wire 1 ~ S_AXI_ARREADY $end
$var wire 1 !! S_AXI_RLAST $end
$var wire 1 "! S_AXI_RVALID $end
$var wire 1 #! S_AXI_SBITERR $end
$var wire 1 $! S_AXI_DBITERR $end
$var wire 1 %! WEA [0:0] $end
$var wire 6 &! ADDRA [5:0] $end
$var wire 32 '! DINA [31:0] $end
$var wire 32 (! DOUTA [31:0] $end
$var wire 1 )! WEB [0:0] $end
$var wire 6 *! ADDRB [5:0] $end
$var wire 32 +! DINB [31:0] $end
$var wire 32 ,! DOUTB [31:0] $end
$var wire 6 -! RDADDRECC [5:0] $end
$var wire 4 .! S_AXI_AWID [3:0] $end
$var wire 32 /! S_AXI_AWADDR [31:0] $end
$var wire 8 0! S_AXI_AWLEN [7:0] $end
$var wire 3 1! S_AXI_AWSIZE [2:0] $end
$var wire 2 2! S_AXI_AWBURST [1:0] $end
$var wire 32 3! S_AXI_WDATA [31:0] $end
$var wire 1 4! S_AXI_WSTRB [0:0] $end
$var wire 4 5! S_AXI_BID [3:0] $end
$var wire 2 6! S_AXI_BRESP [1:0] $end
$var wire 4 7! S_AXI_ARID [3:0] $end
$var wire 32 8! S_AXI_ARADDR [31:0] $end
$var wire 8 9! S_AXI_ARLEN [7:0] $end
$var wire 3 :! S_AXI_ARSIZE [2:0] $end
$var wire 2 ;! S_AXI_ARBURST [1:0] $end
$var wire 4 <! S_AXI_RID [3:0] $end
$var wire 32 =! S_AXI_RDATA [31:0] $end
$var wire 2 >! S_AXI_RRESP [1:0] $end
$var wire 6 ?! S_AXI_RDADDRECC [5:0] $end
$var wire 1 @! WEB_parameterized [0:0] $end
$var wire 1 A! ECCPIPECE $end
$var wire 1 B! SLEEP $end
$var reg 1 C! RSTA_BUSY $end
$var reg 1 D! RSTB_BUSY $end
$var wire 1 E! CLKA $end
$var wire 1 F! RSTA $end
$var wire 1 G! ENA $end
$var wire 1 H! REGCEA $end
$var wire 1 I! CLKB $end
$var wire 1 J! RSTB $end
$var wire 1 K! ENB $end
$var wire 1 L! REGCEB $end
$var wire 1 M! INJECTSBITERR $end
$var wire 1 N! INJECTDBITERR $end
$var wire 1 O! S_ACLK $end
$var wire 1 P! S_ARESETN $end
$var wire 1 Q! S_AXI_AWVALID $end
$var wire 1 R! S_AXI_WLAST $end
$var wire 1 S! S_AXI_WVALID $end
$var wire 1 T! S_AXI_BREADY $end
$var wire 1 U! S_AXI_ARVALID $end
$var wire 1 V! S_AXI_RREADY $end
$var wire 1 W! S_AXI_INJECTSBITERR $end
$var wire 1 X! S_AXI_INJECTDBITERR $end
$var reg 1 Y! injectsbiterr_in $end
$var reg 1 Z! injectdbiterr_in $end
$var reg 1 [! rsta_in $end
$var reg 1 \! ena_in $end
$var reg 1 ]! regcea_in $end
$var reg 1 ^! wea_in [0:0] $end
$var reg 6 _! addra_in [5:0] $end
$var reg 32 `! dina_in [31:0] $end
$var wire 6 a! s_axi_awaddr_out_c [5:0] $end
$var wire 6 b! s_axi_araddr_out_c [5:0] $end
$var wire 1 c! s_axi_wr_en_c $end
$var wire 1 d! s_axi_rd_en_c $end
$var wire 1 e! s_aresetn_a_c $end
$var wire 8 f! s_axi_arlen_c [7:0] $end
$var wire 4 g! s_axi_rid_c [3:0] $end
$var wire 32 h! s_axi_rdata_c [31:0] $end
$var wire 2 i! s_axi_rresp_c [1:0] $end
$var wire 1 j! s_axi_rlast_c $end
$var wire 1 k! s_axi_rvalid_c $end
$var wire 1 l! s_axi_rready_c $end
$var wire 1 m! regceb_c $end
$var wire 7 n! s_axi_payload_c [6:0] $end
$var wire 7 o! m_axi_payload_c [6:0] $end
$var reg 5 p! RSTA_SHFT_REG [4:0] $end
$var reg 1 q! POR_A $end
$var reg 5 r! RSTB_SHFT_REG [4:0] $end
$var reg 1 s! POR_B $end
$var reg 1 t! ENA_dly $end
$var reg 1 u! ENA_dly_D $end
$var reg 1 v! ENB_dly $end
$var reg 1 w! ENB_dly_D $end
$var wire 1 x! RSTA_I_SAFE $end
$var wire 1 y! RSTB_I_SAFE $end
$var wire 1 z! ENA_I_SAFE $end
$var wire 1 {! ENB_I_SAFE $end
$var reg 1 |! ram_rstram_a_busy $end
$var reg 1 }! ram_rstreg_a_busy $end
$var reg 1 ~! ram_rstram_b_busy $end
$var reg 1 !" ram_rstreg_b_busy $end
$var reg 1 "" ENA_dly_reg $end
$var reg 1 #" ENB_dly_reg $end
$var reg 1 $" ENA_dly_reg_D $end
$var reg 1 %" ENB_dly_reg_D $end
$var parameter 144 &" C_CORENAME [143:0] $end
$var parameter 48 '" C_FAMILY [47:0] $end
$var parameter 48 (" C_XDEVICEFAMILY [47:0] $end
$var parameter 16 )" C_ELABORATION_DIR [15:0] $end
$var parameter 32 *" C_INTERFACE_TYPE [31:0] $end
$var parameter 32 +" C_USE_BRAM_BLOCK [31:0] $end
$var parameter 32 ," C_CTRL_ECC_ALGO [31:0] $end
$var parameter 32 -" C_ENABLE_32BIT_ADDRESS [31:0] $end
$var parameter 32 ." C_AXI_TYPE [31:0] $end
$var parameter 32 /" C_AXI_SLAVE_TYPE [31:0] $end
$var parameter 32 0" C_HAS_AXI_ID [31:0] $end
$var parameter 32 1" C_AXI_ID_WIDTH [31:0] $end
$var parameter 32 2" C_MEM_TYPE [31:0] $end
$var parameter 32 3" C_BYTE_SIZE [31:0] $end
$var parameter 32 4" C_ALGORITHM [31:0] $end
$var parameter 32 5" C_PRIM_TYPE [31:0] $end
$var parameter 32 6" C_LOAD_INIT_FILE [31:0] $end
$var parameter 96 7" C_INIT_FILE_NAME [95:0] $end
$var parameter 96 8" C_INIT_FILE [95:0] $end
$var parameter 32 9" C_USE_DEFAULT_DATA [31:0] $end
$var parameter 8 :" C_DEFAULT_DATA [7:0] $end
$var parameter 32 ;" C_HAS_RSTA [31:0] $end
$var parameter 16 <" C_RST_PRIORITY_A [15:0] $end
$var parameter 32 =" C_RSTRAM_A [31:0] $end
$var parameter 8 >" C_INITA_VAL [7:0] $end
$var parameter 32 ?" C_HAS_ENA [31:0] $end
$var parameter 32 @" C_HAS_REGCEA [31:0] $end
$var parameter 32 A" C_USE_BYTE_WEA [31:0] $end
$var parameter 32 B" C_WEA_WIDTH [31:0] $end
$var parameter 88 C" C_WRITE_MODE_A [87:0] $end
$var parameter 32 D" C_WRITE_WIDTH_A [31:0] $end
$var parameter 32 E" C_READ_WIDTH_A [31:0] $end
$var parameter 32 F" C_WRITE_DEPTH_A [31:0] $end
$var parameter 32 G" C_READ_DEPTH_A [31:0] $end
$var parameter 32 H" C_ADDRA_WIDTH [31:0] $end
$var parameter 32 I" C_HAS_RSTB [31:0] $end
$var parameter 16 J" C_RST_PRIORITY_B [15:0] $end
$var parameter 32 K" C_RSTRAM_B [31:0] $end
$var parameter 8 L" C_INITB_VAL [7:0] $end
$var parameter 32 M" C_HAS_ENB [31:0] $end
$var parameter 32 N" C_HAS_REGCEB [31:0] $end
$var parameter 32 O" C_USE_BYTE_WEB [31:0] $end
$var parameter 32 P" C_WEB_WIDTH [31:0] $end
$var parameter 88 Q" C_WRITE_MODE_B [87:0] $end
$var parameter 32 R" C_WRITE_WIDTH_B [31:0] $end
$var parameter 32 S" C_READ_WIDTH_B [31:0] $end
$var parameter 32 T" C_WRITE_DEPTH_B [31:0] $end
$var parameter 32 U" C_READ_DEPTH_B [31:0] $end
$var parameter 32 V" C_ADDRB_WIDTH [31:0] $end
$var parameter 32 W" C_HAS_MEM_OUTPUT_REGS_A [31:0] $end
$var parameter 32 X" C_HAS_MEM_OUTPUT_REGS_B [31:0] $end
$var parameter 32 Y" C_HAS_MUX_OUTPUT_REGS_A [31:0] $end
$var parameter 32 Z" C_HAS_MUX_OUTPUT_REGS_B [31:0] $end
$var parameter 32 [" C_HAS_SOFTECC_INPUT_REGS_A [31:0] $end
$var parameter 32 \" C_HAS_SOFTECC_OUTPUT_REGS_B [31:0] $end
$var parameter 32 ]" C_MUX_PIPELINE_STAGES [31:0] $end
$var parameter 32 ^" C_USE_SOFTECC [31:0] $end
$var parameter 32 _" C_READ_LATENCY_A [31:0] $end
$var parameter 32 `" C_READ_LATENCY_B [31:0] $end
$var parameter 32 a" C_USE_ECC [31:0] $end
$var parameter 32 b" C_EN_ECC_PIPE [31:0] $end
$var parameter 32 c" C_HAS_INJECTERR [31:0] $end
$var parameter 24 d" C_SIM_COLLISION_CHECK [23:0] $end
$var parameter 32 e" C_COMMON_CLK [31:0] $end
$var parameter 32 f" C_DISABLE_WARN_BHV_COLL [31:0] $end
$var parameter 32 g" C_EN_SLEEP_PIN [31:0] $end
$var parameter 32 h" C_USE_URAM [31:0] $end
$var parameter 32 i" C_EN_RDADDRA_CHG [31:0] $end
$var parameter 32 j" C_EN_RDADDRB_CHG [31:0] $end
$var parameter 32 k" C_EN_DEEPSLEEP_PIN [31:0] $end
$var parameter 32 l" C_EN_SHUTDOWN_PIN [31:0] $end
$var parameter 32 m" C_EN_SAFETY_CKT [31:0] $end
$var parameter 8 n" C_COUNT_36K_BRAM [7:0] $end
$var parameter 8 o" C_COUNT_18K_BRAM [7:0] $end
$var parameter 344 p" C_EST_POWER_SUMMARY [343:0] $end
$var parameter 32 q" C_DISABLE_WARN_BHV_RANGE [31:0] $end
$var parameter 32 r" FLOP_DELAY [31:0] $end
$var parameter 32 s" C_AXI_PAYLOAD [31:0] $end
$var parameter 32 t" AXI_FULL_MEMORY_SLAVE [31:0] $end
$var parameter 32 u" C_AXI_ADDR_WIDTH_MSB [31:0] $end
$var parameter 32 v" C_AXI_ADDR_WIDTH [31:0] $end
$var parameter 32 w" LOWER_BOUND_VAL [31:0] $end
$var parameter 32 x" C_AXI_ADDR_WIDTH_LSB [31:0] $end
$var parameter 32 y" C_AXI_OS_WR [31:0] $end
$scope module native_mem_module.blk_mem_gen_v8_4_2_inst $end
$var wire 1 E! CLKA $end
$var wire 1 x! RSTA $end
$var wire 1 z! ENA $end
$var wire 1 z" REGCEA $end
$var wire 1 {" WEA [0:0] $end
$var wire 6 |" ADDRA [5:0] $end
$var wire 32 }" DINA [31:0] $end
$var wire 32 (! DOUTA [31:0] $end
$var wire 1 I! CLKB $end
$var wire 1 y! RSTB $end
$var wire 1 {! ENB $end
$var wire 1 L! REGCEB $end
$var wire 1 )! WEB [0:0] $end
$var wire 6 *! ADDRB [5:0] $end
$var wire 32 +! DINB [31:0] $end
$var wire 32 ,! DOUTB [31:0] $end
$var wire 1 ~" INJECTSBITERR $end
$var wire 1 !# INJECTDBITERR $end
$var wire 1 A! ECCPIPECE $end
$var wire 1 B! SLEEP $end
$var wire 1 y SBITERR $end
$var wire 1 z DBITERR $end
$var wire 6 -! RDADDRECC [5:0] $end
$var reg 39 "# doublebit_error [38:0] $end
$var reg 32 ## memory_out_a [31:0] $end
$var reg 32 $# memory_out_b [31:0] $end
$var reg 1 %# sbiterr_in $end
$var wire 1 &# sbiterr_sdp $end
$var reg 1 '# dbiterr_in $end
$var wire 1 (# dbiterr_sdp $end
$var wire 32 )# dout_i [31:0] $end
$var wire 1 *# dbiterr_i $end
$var wire 1 +# sbiterr_i $end
$var wire 6 ,# rdaddrecc_i [5:0] $end
$var reg 6 -# rdaddrecc_in [5:0] $end
$var wire 6 .# rdaddrecc_sdp [5:0] $end
$var reg 32 /# inita_val [31:0] $end
$var reg 32 0# initb_val [31:0] $end
$var reg 1 1# is_collision $end
$var reg 1 2# is_collision_a $end
$var reg 1 3# is_collision_delay_a $end
$var reg 1 4# is_collision_b $end
$var reg 1 5# is_collision_delay_b $end
$var integer 32 6# status $end
$var integer 32 7# initfile $end
$var integer 32 8# meminitfile $end
$var reg 32 9# mif_data [31:0] $end
$var reg 32 :# mem_data [31:0] $end
$var reg 256 ;# inita_str [255:0] $end
$var reg 256 <# initb_str [255:0] $end
$var reg 256 =# default_data_str [255:0] $end
$var reg 8184 ># init_file_str [8183:0] $end
$var reg 8184 ?# mem_init_file_str [8183:0] $end
$var integer 32 @# cnt $end
$var integer 32 A# write_addr_a_width $end
$var integer 32 B# read_addr_a_width $end
$var integer 32 C# write_addr_b_width $end
$var integer 32 D# read_addr_b_width $end
$var wire 1 E# ena_i $end
$var wire 1 F# enb_i $end
$var wire 1 G# reseta_i $end
$var wire 1 H# resetb_i $end
$var wire 1 I# wea_i [0:0] $end
$var wire 1 J# web_i [0:0] $end
$var wire 1 K# rea_i $end
$var wire 1 L# reb_i $end
$var wire 1 M# rsta_outp_stage $end
$var wire 1 N# rstb_outp_stage $end
$var wire 6 O# \async_coll.addra_delay  [5:0] $end
$var wire 1 P# \async_coll.wea_delay  [0:0] $end
$var wire 1 Q# \async_coll.ena_delay  $end
$var wire 6 R# \async_coll.addrb_delay  [5:0] $end
$var wire 1 S# \async_coll.web_delay  [0:0] $end
$var wire 1 T# \async_coll.enb_delay  $end
$var parameter 144 U# C_CORENAME [143:0] $end
$var parameter 48 V# C_FAMILY [47:0] $end
$var parameter 48 W# C_XDEVICEFAMILY [47:0] $end
$var parameter 32 X# C_MEM_TYPE [31:0] $end
$var parameter 32 Y# C_BYTE_SIZE [31:0] $end
$var parameter 32 Z# C_USE_BRAM_BLOCK [31:0] $end
$var parameter 32 [# C_ALGORITHM [31:0] $end
$var parameter 32 \# C_PRIM_TYPE [31:0] $end
$var parameter 32 ]# C_LOAD_INIT_FILE [31:0] $end
$var parameter 96 ^# C_INIT_FILE_NAME [95:0] $end
$var parameter 96 _# C_INIT_FILE [95:0] $end
$var parameter 32 `# C_USE_DEFAULT_DATA [31:0] $end
$var parameter 8 a# C_DEFAULT_DATA [7:0] $end
$var parameter 32 b# C_RST_TYPE [31:0] $end
$var parameter 32 c# C_HAS_RSTA [31:0] $end
$var parameter 16 d# C_RST_PRIORITY_A [15:0] $end
$var parameter 32 e# C_RSTRAM_A [31:0] $end
$var parameter 8 f# C_INITA_VAL [7:0] $end
$var parameter 32 g# C_HAS_ENA [31:0] $end
$var parameter 32 h# C_HAS_REGCEA [31:0] $end
$var parameter 32 i# C_USE_BYTE_WEA [31:0] $end
$var parameter 32 j# C_WEA_WIDTH [31:0] $end
$var parameter 88 k# C_WRITE_MODE_A [87:0] $end
$var parameter 32 l# C_WRITE_WIDTH_A [31:0] $end
$var parameter 32 m# C_READ_WIDTH_A [31:0] $end
$var parameter 32 n# C_WRITE_DEPTH_A [31:0] $end
$var parameter 32 o# C_READ_DEPTH_A [31:0] $end
$var parameter 32 p# C_ADDRA_WIDTH [31:0] $end
$var parameter 32 q# C_HAS_RSTB [31:0] $end
$var parameter 16 r# C_RST_PRIORITY_B [15:0] $end
$var parameter 32 s# C_RSTRAM_B [31:0] $end
$var parameter 8 t# C_INITB_VAL [7:0] $end
$var parameter 32 u# C_HAS_ENB [31:0] $end
$var parameter 32 v# C_HAS_REGCEB [31:0] $end
$var parameter 32 w# C_USE_BYTE_WEB [31:0] $end
$var parameter 32 x# C_WEB_WIDTH [31:0] $end
$var parameter 88 y# C_WRITE_MODE_B [87:0] $end
$var parameter 32 z# C_WRITE_WIDTH_B [31:0] $end
$var parameter 32 {# C_READ_WIDTH_B [31:0] $end
$var parameter 32 |# C_WRITE_DEPTH_B [31:0] $end
$var parameter 32 }# C_READ_DEPTH_B [31:0] $end
$var parameter 32 ~# C_ADDRB_WIDTH [31:0] $end
$var parameter 32 !$ C_HAS_MEM_OUTPUT_REGS_A [31:0] $end
$var parameter 32 "$ C_HAS_MEM_OUTPUT_REGS_B [31:0] $end
$var parameter 32 #$ C_HAS_MUX_OUTPUT_REGS_A [31:0] $end
$var parameter 32 $$ C_HAS_MUX_OUTPUT_REGS_B [31:0] $end
$var parameter 32 %$ C_HAS_SOFTECC_INPUT_REGS_A [31:0] $end
$var parameter 32 &$ C_HAS_SOFTECC_OUTPUT_REGS_B [31:0] $end
$var parameter 32 '$ C_MUX_PIPELINE_STAGES [31:0] $end
$var parameter 32 ($ C_USE_SOFTECC [31:0] $end
$var parameter 32 )$ C_USE_ECC [31:0] $end
$var parameter 32 *$ C_HAS_INJECTERR [31:0] $end
$var parameter 24 +$ C_SIM_COLLISION_CHECK [23:0] $end
$var parameter 32 ,$ C_COMMON_CLK [31:0] $end
$var parameter 32 -$ FLOP_DELAY [31:0] $end
$var parameter 32 .$ C_DISABLE_WARN_BHV_COLL [31:0] $end
$var parameter 32 /$ C_EN_ECC_PIPE [31:0] $end
$var parameter 32 0$ C_DISABLE_WARN_BHV_RANGE [31:0] $end
$var parameter 32 1$ ADDRFILE [31:0] $end
$var parameter 32 2$ COLLFILE [31:0] $end
$var parameter 32 3$ ERRFILE [31:0] $end
$var parameter 32 4$ COLL_DELAY [31:0] $end
$var parameter 32 5$ CHKBIT_WIDTH [31:0] $end
$var parameter 32 6$ MIN_WIDTH_A [31:0] $end
$var parameter 32 7$ MIN_WIDTH_B [31:0] $end
$var parameter 32 8$ MIN_WIDTH [31:0] $end
$var parameter 32 9$ MAX_DEPTH_A [31:0] $end
$var parameter 32 :$ MAX_DEPTH_B [31:0] $end
$var parameter 32 ;$ MAX_DEPTH [31:0] $end
$var parameter 32 <$ WRITE_WIDTH_RATIO_A [31:0] $end
$var parameter 32 =$ READ_WIDTH_RATIO_A [31:0] $end
$var parameter 32 >$ WRITE_WIDTH_RATIO_B [31:0] $end
$var parameter 32 ?$ READ_WIDTH_RATIO_B [31:0] $end
$var parameter 32 @$ WRITE_ADDR_A_DIV [31:0] $end
$var parameter 32 A$ READ_ADDR_A_DIV [31:0] $end
$var parameter 32 B$ WRITE_ADDR_B_DIV [31:0] $end
$var parameter 32 C$ READ_ADDR_B_DIV [31:0] $end
$var parameter 32 D$ BYTE_SIZE [31:0] $end
$var parameter 56 E$ C_FAMILY_LOCALPARAM [55:0] $end
$var parameter 0 F$ SINGLE_PORT $end
$var parameter 0 G$ IS_ROM $end
$var parameter 0 H$ HAS_A_WRITE $end
$var parameter 0 I$ HAS_B_WRITE $end
$var parameter 0 J$ HAS_A_READ $end
$var parameter 0 K$ HAS_B_READ $end
$var parameter 0 L$ HAS_B_PORT $end
$var parameter 32 M$ MUX_PIPELINE_STAGES_A [31:0] $end
$var parameter 32 N$ MUX_PIPELINE_STAGES_B [31:0] $end
$var parameter 32 O$ NUM_OUTPUT_STAGES_A [31:0] $end
$var parameter 32 P$ NUM_OUTPUT_STAGES_B [31:0] $end
$scope module reg_a $end
$var wire 1 E! CLK $end
$var wire 1 M# RST $end
$var wire 1 z! EN $end
$var wire 1 z" REGCE $end
$var wire 32 Q$ DIN_I [31:0] $end
$var reg 32 R$ DOUT [31:0] $end
$var wire 1 S$ SBITERR_IN_I $end
$var wire 1 T$ DBITERR_IN_I $end
$var reg 1 U$ SBITERR $end
$var reg 1 V$ DBITERR $end
$var wire 6 W$ RDADDRECC_IN_I [5:0] $end
$var wire 1 X$ ECCPIPECE $end
$var reg 6 Y$ RDADDRECC [5:0] $end
$var reg 32 Z$ out_regs [31:0] $end
$var reg 6 [$ rdaddrecc_regs [5:0] $end
$var reg 1 \$ sbiterr_regs [0:0] $end
$var reg 1 ]$ dbiterr_regs [0:0] $end
$var reg 256 ^$ init_str [255:0] $end
$var reg 32 _$ init_val [31:0] $end
$var wire 1 `$ en_i $end
$var wire 1 a$ regce_i $end
$var wire 1 b$ rst_i $end
$var reg 32 c$ DIN [31:0] $end
$var reg 6 d$ RDADDRECC_IN [5:0] $end
$var reg 1 e$ SBITERR_IN $end
$var reg 1 f$ DBITERR_IN $end
$var parameter 48 g$ C_FAMILY [47:0] $end
$var parameter 48 h$ C_XDEVICEFAMILY [47:0] $end
$var parameter 32 i$ C_RST_TYPE [31:0] $end
$var parameter 32 j$ C_HAS_RST [31:0] $end
$var parameter 32 k$ C_RSTRAM [31:0] $end
$var parameter 16 l$ C_RST_PRIORITY [15:0] $end
$var parameter 8 m$ C_INIT_VAL [7:0] $end
$var parameter 32 n$ C_HAS_EN [31:0] $end
$var parameter 32 o$ C_HAS_REGCE [31:0] $end
$var parameter 32 p$ C_DATA_WIDTH [31:0] $end
$var parameter 32 q$ C_ADDRB_WIDTH [31:0] $end
$var parameter 32 r$ C_HAS_MEM_OUTPUT_REGS [31:0] $end
$var parameter 32 s$ C_USE_SOFTECC [31:0] $end
$var parameter 32 t$ C_USE_ECC [31:0] $end
$var parameter 32 u$ NUM_STAGES [31:0] $end
$var parameter 32 v$ C_EN_ECC_PIPE [31:0] $end
$var parameter 32 w$ FLOP_DELAY [31:0] $end
$var parameter 32 x$ REG_STAGES [31:0] $end
$upscope $end
$scope module reg_b $end
$var wire 1 I! CLK $end
$var wire 1 N# RST $end
$var wire 1 {! EN $end
$var wire 1 L! REGCE $end
$var wire 32 y$ DIN_I [31:0] $end
$var reg 32 z$ DOUT [31:0] $end
$var wire 1 {$ SBITERR_IN_I $end
$var wire 1 |$ DBITERR_IN_I $end
$var reg 1 }$ SBITERR $end
$var reg 1 ~$ DBITERR $end
$var wire 6 !% RDADDRECC_IN_I [5:0] $end
$var wire 1 A! ECCPIPECE $end
$var reg 6 "% RDADDRECC [5:0] $end
$var reg 32 #% out_regs [31:0] $end
$var reg 6 $% rdaddrecc_regs [5:0] $end
$var reg 1 %% sbiterr_regs [0:0] $end
$var reg 1 &% dbiterr_regs [0:0] $end
$var reg 256 '% init_str [255:0] $end
$var reg 32 (% init_val [31:0] $end
$var wire 1 )% en_i $end
$var wire 1 *% regce_i $end
$var wire 1 +% rst_i $end
$var reg 32 ,% DIN [31:0] $end
$var reg 6 -% RDADDRECC_IN [5:0] $end
$var reg 1 .% SBITERR_IN $end
$var reg 1 /% DBITERR_IN $end
$var parameter 48 0% C_FAMILY [47:0] $end
$var parameter 48 1% C_XDEVICEFAMILY [47:0] $end
$var parameter 32 2% C_RST_TYPE [31:0] $end
$var parameter 32 3% C_HAS_RST [31:0] $end
$var parameter 32 4% C_RSTRAM [31:0] $end
$var parameter 16 5% C_RST_PRIORITY [15:0] $end
$var parameter 8 6% C_INIT_VAL [7:0] $end
$var parameter 32 7% C_HAS_EN [31:0] $end
$var parameter 32 8% C_HAS_REGCE [31:0] $end
$var parameter 32 9% C_DATA_WIDTH [31:0] $end
$var parameter 32 :% C_ADDRB_WIDTH [31:0] $end
$var parameter 32 ;% C_HAS_MEM_OUTPUT_REGS [31:0] $end
$var parameter 32 <% C_USE_SOFTECC [31:0] $end
$var parameter 32 =% C_USE_ECC [31:0] $end
$var parameter 32 >% NUM_STAGES [31:0] $end
$var parameter 32 ?% C_EN_ECC_PIPE [31:0] $end
$var parameter 32 @% FLOP_DELAY [31:0] $end
$var parameter 32 A% REG_STAGES [31:0] $end
$upscope $end
$scope module has_softecc_output_reg_stage $end
$var wire 1 I! CLK $end
$var wire 32 )# DIN [31:0] $end
$var reg 32 B% DOUT [31:0] $end
$var wire 1 +# SBITERR_IN $end
$var wire 1 *# DBITERR_IN $end
$var reg 1 C% SBITERR $end
$var reg 1 D% DBITERR $end
$var wire 6 ,# RDADDRECC_IN [5:0] $end
$var reg 6 E% RDADDRECC [5:0] $end
$var reg 32 F% dout_i [31:0] $end
$var reg 1 G% sbiterr_i $end
$var reg 1 H% dbiterr_i $end
$var reg 6 I% rdaddrecc_i [5:0] $end
$var parameter 32 J% C_DATA_WIDTH [31:0] $end
$var parameter 32 K% C_ADDRB_WIDTH [31:0] $end
$var parameter 32 L% C_HAS_SOFTECC_OUTPUT_REGS_B [31:0] $end
$var parameter 32 M% C_USE_SOFTECC [31:0] $end
$var parameter 32 N% FLOP_DELAY [31:0] $end
$upscope $end
$scope task write_a $end
$var reg 6 O% addr [5:0] $end
$var reg 1 P% byte_en [0:0] $end
$var reg 32 Q% data [31:0] $end
$var reg 1 R% inj_sbiterr $end
$var reg 1 S% inj_dbiterr $end
$var reg 32 T% current_contents [31:0] $end
$var reg 6 U% address [5:0] $end
$var integer 32 V% i $end
$upscope $end
$scope task write_b $end
$var reg 6 W% addr [5:0] $end
$var reg 1 X% byte_en [0:0] $end
$var reg 32 Y% data [31:0] $end
$var reg 32 Z% current_contents [31:0] $end
$var reg 6 [% address [5:0] $end
$var integer 32 \% i $end
$upscope $end
$scope task read_a $end
$var reg 6 ]% addr [5:0] $end
$var reg 1 ^% reset $end
$var reg 6 _% address [5:0] $end
$var integer 32 `% i $end
$upscope $end
$scope task read_b $end
$var reg 6 a% addr [5:0] $end
$var reg 1 b% reset $end
$var reg 6 c% address [5:0] $end
$var integer 32 d% i $end
$upscope $end
$scope task init_memory $end
$var integer 32 e% i $end
$var integer 32 f% j $end
$var integer 32 g% addr_step $end
$var integer 32 h% status $end
$var reg 32 i% default_data [31:0] $end
$upscope $end
$scope function log2roundup $end
$var integer 32 j% log2roundup $end
$var integer 32 k% data_value $end
$var integer 32 l% width $end
$var integer 32 m% cnt $end
$upscope $end
$scope function collision_check $end
$var integer 32 n% collision_check $end
$var reg 6 o% addr_a [5:0] $end
$var integer 32 p% iswrite_a $end
$var reg 6 q% addr_b [5:0] $end
$var integer 32 r% iswrite_b $end
$var reg 1 s% c_aw_bw $end
$var reg 1 t% c_aw_br $end
$var reg 1 u% c_ar_bw $end
$var integer 32 v% scaled_addra_to_waddrb_width $end
$var integer 32 w% scaled_addrb_to_waddrb_width $end
$var integer 32 x% scaled_addra_to_waddra_width $end
$var integer 32 y% scaled_addrb_to_waddra_width $end
$var integer 32 z% scaled_addra_to_raddrb_width $end
$var integer 32 {% scaled_addrb_to_raddrb_width $end
$var integer 32 |% scaled_addra_to_raddra_width $end
$var integer 32 }% scaled_addrb_to_raddra_width $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope module regs_alu $end
$var wire 1 + clk $end
$var wire 1 , rst $end
$var wire 1 - Write_Reg $end
$var wire 32 0 Inst_code [31:0] $end
$var wire 32 8 ALU_F [31:0] $end
$var wire 3 ' which [2:0] $end
$var wire 8 ( seg [7:0] $end
$var reg 1 ~% enable $end
$var reg 2 !& out_ZF_OF [1:0] $end
$var integer 32 "& i $end
$var wire 32 #& R_Data_A [31:0] $end
$var wire 32 $& R_Data_B [31:0] $end
$var wire 1 %& ZF $end
$var wire 1 && OF $end
$var wire 3 '& count [2:0] $end
$var wire 4 (& digit [3:0] $end
$var wire 6 )& funct [5:0] $end
$var reg 5 *& W_Addr [4:0] $end
$var reg 4 +& ALU_OP [3:0] $end
$var reg 5 ,& R_Addr_A [4:0] $end
$var reg 5 -& R_Addr_B [4:0] $end
$var reg 32 .& input_val [31:0] $end
$scope module ALU_1 $end
$var wire 1 + clk $end
$var wire 4 /& ALU_OP [3:0] $end
$var wire 32 #& A [31:0] $end
$var wire 32 $& B [31:0] $end
$var reg 32 0& F [31:0] $end
$var reg 1 1& ZF $end
$var reg 1 2& OF $end
$var reg 1 3& C32 $end
$upscope $end
$scope module o_val_display $end
$var wire 1 + clk $end
$var wire 32 0 Inst_code [31:0] $end
$var reg 3 4& which [2:0] $end
$var reg 8 5& seg [7:0] $end
$var reg 15 6& count [14:0] $end
$var reg 4 7& digit [3:0] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
0!
z!!
0!"
0!#
b0 !$
b0 !%
b0 !&
x"
z"!
0""
b11 "#
b0 "$
b0 "%
b100000 "&
1#
z#!
0#"
b0 ##
b0 #$
b0 #%
b0 #&
1$
z$!
0$"
b0 $#
b0 $$
b0 $%
b0 $&
0%
z%!
0%"
0%#
b0 %$
0%%
1%&
b0 &
b0 &!
b11000100110110001101011010111110110110101100101011011010101111101100111011001010110111001011111011101100011100001011111001101000101111100110010 &"
0&#
b0 &$
0&%
0&&
b0 '
bz '!
b11000010111001001110100011010010111100000110111 '"
0'#
b0 '$
b110000 '%
b0 '&
b11 (
b0 (!
b11000010111001001110100011010010111100000110111 ("
0(#
b0 ($
b0 (%
b0 (&
1)
0)!
b10111000101111 )"
b0 )#
b0 )$
1)%
bz )&
x*
b0 *!
b0 *"
0*#
b0 *$
1*%
b0 *&
0+
b0 +!
b0 +"
0+#
b10000010100110001001100 +$
0+%
b0 +&
1,
b0 ,!
b1001110010011110100111001000101 ,"
b0 ,#
b0 ,$
b0 ,%
b0 ,&
1-
b0 -!
b0 -"
b0 -#
b1100100 -$
b0 -%
b0 -&
0.
b0 .!
b1 ."
b0 .#
b0 .$
0.%
bx .&
b0 /
b0 /!
b0 /"
b0 /#
b0 /$
0/%
b0 /&
b0 0
b0 0!
b0 0"
b0 0#
b0 0$
b11000010111001001110100011010010111100000110111 0%
b0 0&
b0 1
b0 1!
b100 1"
x1#
b10000000000000000000000000000001 1$
b11000010111001001110100011010010111100000110111 1%
11&
b0 2
b0 2!
b0 2"
x2#
b10000000000000000000000000000001 2$
b1010011010110010100111001000011 2%
02&
b0 3
b0 3!
b1001 3"
x3#
b10000000000000000000000000000001 3$
b0 3%
03&
b0 4
04!
b1 4"
x4#
b1100100 4$
b0 4%
b0 4&
b0 5
bz 5!
b1 5"
x5#
b111 5$
b100001101000101 5%
b11 5&
b0 6
bz 6!
b1 6"
bx 6#
b100000 6$
b110000 6%
b0 6&
b0 7
b0 7!
b10010010110111001110011011101000101111101010010010011110100110100101110011011010110100101100110 7"
b11111111111111111011000111100000 7#
b100000 7$
b0 7%
b0 7&
b0 8
b0 8!
b10010010110111001110011011101000101111101010010010011110100110100101110011011010110010101101101 8"
bx 8#
b100000 8$
b0 8%
bx 9
b0 9!
b0 9"
b1011110101111100000100000 9#
b1000000 9$
b100000 9%
b100 :
b0 :!
b110000 :"
bx :#
b1000000 :$
b110 :%
b0 ;
b0 ;!
b0 ;"
b110000 ;#
b1000000 ;$
b0 ;%
z<
bz <!
b100001101000101 <"
b110000 <#
b1 <$
b0 <%
b0 =
bz =!
b0 ="
b110000 =#
b1 =$
b0 =%
bz >
bz >!
b110000 >"
b10010010110111001110011011101000101111101010010010011110100110100101110011011010110100101100110 >#
b1 >$
b0 >%
0?
bz ?!
b0 ?"
b10010010110111001110011011101000101111101010010010011110100110100101110011011010110010101101101 ?#
b1 ?$
b0 ?%
0@
0@!
b0 @"
b1 @#
b1 @$
b1100100 @%
0A
0A!
b0 A"
b110 A#
b1 A$
b1 A%
0B
0B!
b1 B"
b110 B#
b1 B$
b0 B%
0C
0C!
b101011101010010010010010101010001000101010111110100011001001001010100100101001101010100 C"
b110 C#
b1 C$
0C%
0D
0D!
b100000 D"
b110 D#
b1001 D$
0D%
0E
xE!
b100000 E"
1E#
b1110110011010010111001001110100011001010111100000110111 E$
b0 E%
0F
0F!
b1000000 F"
0F#
1F$
b0 F%
b0 G
0G!
b1000000 G"
0G#
0G$
0G%
b0 H
0H!
b110 H"
0H#
1H$
0H%
b0 I
0I!
b0 I"
zI#
0I$
b0 I%
0J
0J!
b100001101000101 J"
0J#
1J$
b100000 J%
0K
0K!
b0 K"
1K#
0K$
b110 K%
0L
0L!
b110000 L"
0L#
0L$
b0 L%
0M
0M!
b0 M"
0M#
b0 M$
b0 M%
b0 N
0N!
b0 N"
0N#
b0 N$
b1100100 N%
0O
0O!
b0 O"
bx O#
b0 O$
b11111 O%
0P
0P!
b1 P"
xP#
b0 P$
1P%
0Q
0Q!
b101011101010010010010010101010001000101010111110100011001001001010100100101001101010100 Q"
xQ#
b0 Q$
b1011110101111100000100000 Q%
0R
0R!
b100000 R"
bx R#
b0 R$
0R%
0S
0S!
b100000 S"
xS#
0S$
0S%
0T
0T!
b1000000 T"
xT#
0T$
b1011110101111100000100000 T%
0U
0U!
b1000000 U"
b11000100110110001101011010111110110110101100101011011010101111101100111011001010110111001011111011101100011100001011111001101000101111100110010 U#
0U$
b11111 U%
0V
0V!
b110 V"
b11000010111001001110100011010010111100000110111 V#
0V$
bx V%
b0 W
0W!
b0 W"
b11000010111001001110100011010010111100000110111 W#
b0 W$
bx W%
b0 X
0X!
b0 X"
b0 X#
0X$
xX%
b0 Y
0Y!
b0 Y"
b1001 Y#
b0 Y$
bx Y%
b0 Z
0Z!
b0 Z"
b0 Z#
b0 Z$
bx Z%
b0 [
0[!
b0 ["
b1 [#
b0 [$
bx [%
0\
0\!
b0 \"
b1 \#
0\$
bx \%
z]
0]!
b0 ]"
b1 ]#
0]$
bx ]%
b0 ^
z^!
b0 ^"
b10010010110111001110011011101000101111101010010010011110100110100101110011011010110100101100110 ^#
b110000 ^$
x^%
0_
b0 _!
b1 _"
b10010010110111001110011011101000101111101010010010011110100110100101110011011010110010101101101 _#
b0 _$
bx _%
0`
bz `!
b1 `"
b0 `#
1`$
bx `%
0a
bz a!
b0 a"
b110000 a#
1a$
bx a%
zb
bz b!
b0 b"
b1010011010110010100111001000011 b#
0b$
xb%
bz c
zc!
b0 c"
b0 c#
b0 c$
bx c%
bz d
zd!
b10000010100110001001100 d"
b100001101000101 d#
b0 d$
bx d%
ze
ze!
b0 e"
b0 e#
0e$
b1000000 e%
0f
bz f!
b0 f"
b110000 f#
0f$
bx f%
b0 g
bz g!
b0 g"
b0 g#
b11000010111001001110100011010010111100000110111 g$
b1 g%
b0 h
bz h!
b0 h"
b0 h#
b11000010111001001110100011010010111100000110111 h$
b11111111111111111111111111111111 h%
b0 i
bz i!
b0 i"
b0 i#
b1010011010110010100111001000011 i$
b0 i%
b0 j
zj!
b0 j"
b1 j#
b0 j$
b0 j%
b0 k
zk!
b0 k"
b101011101010010010010010101010001000101010111110100011001001001010100100101001101010100 k#
b0 k$
b1 k%
0l
0l!
b0 l"
b100000 l#
b100001101000101 l$
b0 l%
zm
0m!
b0 m"
b100000 m#
b110000 m$
bx m%
bz n
bz n!
b110000 n"
b1000000 n#
b0 n$
bx n%
bz o
bz o!
b110001 o"
b1000000 o#
b0 o$
bx o%
bz p
b0 p!
b1000101011100110111010001101001011011010110000101110100011001010110010000100000010100000110111101110111011001010111001000100000011001100110111101110010001000000100100101010000001000000010000000100000001000000010000000111010001000000010000000100000001000000010000000110011001011100011010100110011001110000011010000110101001000000110110101010111 p"
b110 p#
b100000 p$
bx p%
zq
0q!
b0 q"
b0 q#
b110 q$
bx q%
zr
b0 r!
b1100100 r"
b100001101000101 r#
b0 r$
bx r%
0s
0s!
b111 s"
b0 s#
b0 s$
xs%
0t
0t!
b1 t"
b110000 t#
b0 t$
xt%
0u
0u!
b1000 u"
b0 u#
b0 u$
xu%
zv
0v!
b1000 v"
b0 v#
b0 v$
bx v%
zw
0w!
b10 w"
b0 w#
b1100100 w$
bx w%
bz x
0x!
b0 x"
b1 x#
b1 x$
bx x%
0y
0y!
b10 y"
b101011101010010010010010101010001000101010111110100011001001001010100100101001101010100 y#
b0 y$
bx y%
0z
0z!
0z"
b100000 z#
b0 z$
bx z%
z{
0{!
z{"
b100000 {#
0{$
bx {%
z|
0|!
b0 |"
b1000000 |#
0|$
bx |%
z}
0}!
bz }"
b1000000 }#
0}$
bx }%
z~
0~!
0~"
b110 ~#
0~$
1~%
$end
#100
b0 O#
zP#
1Q#
b0 R#
0S#
0T#
#20000
1!
b100000 "&
b1 '&
1+
b0 +&
b0 ,&
b0 -&
b1 6&
#40000
0!
0+
#50000
0#
0,
#60000
1!
b1 !&
b10 '&
1+
b0 ,&
b0 -&
b1 1
b10 6&
#80000
0!
0+
#100000
1!
b1 !&
b11 '&
1+
b0 ,&
b0 -&
b11 6&
#120000
0!
0+
#140000
1!
b1 !&
b100 '&
1+
b0 ,&
b0 -&
b100 6&
#150000
1%
1.
#160000
0!
0+
#180000
1!
b1 !&
b1 &
b101 '&
1+
b0 ,&
b0 -&
b1 /
b101 6&
#200000
0!
0+
#220000
1!
b1 !&
b110 '&
1+
b0 ,&
b0 -&
b110 6&
#240000
0!
0+
#260000
1!
b1 !&
b111 '&
1+
b0 ,&
b0 -&
b111 6&
#280000
0!
0+
#300000
1!
b1 !&
b0 '&
1+
b0 ,&
b0 -&
b1000 6&
#320000
0!
0+
#340000
1!
b1 !&
b1 '&
1+
b0 ,&
b0 -&
b1001 6&
#360000
0!
0+
#380000
1!
b1 !&
b10 '&
1+
b0 ,&
b0 -&
b1010 6&
#400000
0!
0+
#420000
1!
b1 !&
b11 '&
1+
b0 ,&
b0 -&
b1011 6&
#440000
0!
0+
#460000
1!
b1 !&
b100 '&
1+
b0 ,&
b0 -&
b1100 6&
#480000
0!
0+
#500000
1!
b1 !&
b101 '&
1+
b0 ,&
b0 -&
b1101 6&
#520000
0!
0+
#540000
1!
b1 !&
b110 '&
1+
b0 ,&
b0 -&
b1110 6&
#560000
0!
0+
#580000
1!
b1 !&
b111 '&
1+
b0 ,&
b0 -&
b1111 6&
#600000
0!
0+
#620000
1!
b1 !&
b0 '&
1+
b0 ,&
b0 -&
b10000 6&
#640000
0!
0+
#650000
0%
0.
#660000
1!
b1 !&
b0 &
b1 '&
1+
b0 ,&
b0 -&
b0 /
b10001 6&
#680000
0!
0+
#700000
1!
b1 !&
b10 '&
1+
b0 ,&
b0 -&
b10010 6&
#720000
0!
0+
#740000
1!
b1 !&
b11 '&
1+
b0 ,&
b0 -&
b10011 6&
#760000
0!
0+
#780000
1!
b1 !&
b100 '&
1+
b0 ,&
b0 -&
b10100 6&
#800000
0!
0+
#820000
1!
b1 !&
b101 '&
1+
b0 ,&
b0 -&
b10101 6&
#840000
0!
0+
#860000
1!
b1 !&
b110 '&
1+
b0 ,&
b0 -&
b10110 6&
#880000
0!
0+
#900000
1!
b1 !&
b111 '&
1+
b0 ,&
b0 -&
b10111 6&
#920000
0!
0+
#940000
1!
b1 !&
b0 '&
1+
b0 ,&
b0 -&
b11000 6&
#960000
0!
0+
#980000
1!
b1 !&
b1 '&
1+
b0 ,&
b0 -&
b11001 6&
